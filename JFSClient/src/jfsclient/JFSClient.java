/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jfsclient;

import java.awt.AWTException;
import java.awt.Image;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.SocketException;
import java.net.UnknownHostException;

/**
 *
 * @author IzedTea
 */
public class JFSClient extends javax.swing.JFrame {
    private Config config = new Config();
    
    public JFSClient() {
        initComponents();
        
        tray();
        
        connect();
    }
    
    private void connect() {
        try {
            final Socket client = new Socket(config.getServer(), 6789);
            
            final BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));
            final PrintWriter out = new PrintWriter(client.getOutputStream(), true);
            
            new Thread(new Runnable() {
                @Override
                public void run() {
                    while(client.isConnected()) {
                        try {
                            String message;
                            
                            if((message = in.readLine()) == null) {
                                break;
                            }
                            
                        try {
                            Runtime.getRuntime().exec("java -jar " + new File("").getAbsolutePath() + "\\jfs.jar -nogui -quiet -dir " + config.getSrc() + " " + config.getTar());
                        } catch (IOException ex) { }
                            
                            out.println("success");
                        } catch (SocketException ex) {
                            break;
                        } catch (IOException ex) {
                            out.println(ex.getMessage());
                        }
                    }
                    try { in.close(); } catch (IOException ex) { }
                }
            }).start();
        } catch (UnknownHostException ex) {
            
        } catch (IOException ex) { 
            
        }
    }
    
    @Override
    public void setVisible(boolean b) { }
    
    private void tray() {
        MenuItem close = new MenuItem("Exit");
        close.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });

        PopupMenu menu = new PopupMenu();

        menu.add(close);

        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Image image = toolkit.getImage(new java.io.File("").getAbsolutePath() + "\\sync.png");

        TrayIcon trayIcon = new TrayIcon(image, "SystemTray Demo", menu);
        trayIcon.setImageAutoSize(true);

        SystemTray tray = SystemTray.getSystemTray(); 
        
        try { tray.add(trayIcon); } catch (AWTException ex) { }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFSClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new JFSClient().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
